%% General form with neighbor nodes;
% input:
% N: number of slave nodes;
% K: number of tasks in one application;
% Ni: Neighbor nodes of each slave node;
% Bati: Battery energy of slave nodes;
% Batm: Battery energy of master node;
% Wk: Workload of each tasks of each node;
% le: data amount generated by each tasks;
load('wsndata.mat');
%WSN parameters:
% N = 3;   %the number of slave nodes;
% K = 5;   %the number of the tasks in each
% var = 1; %the variation among the tasks;

Bati = randi([1,5],N,1);  % the battery energy of slave nodes;
Batm = randi([6,10],1,1); % the battery energy of master nodes;

Wk = randi([100,1000],N,K);

% Wk = [196,801,902,278,550;689,744,401,127,532;545,914,729,770,915];
% le = [344,423,196,296,385;347,331,455,167,300;444,173,111,492,288];
% Ni = zeros(N);
% Ni(1,2) = 1;
% Ni(1,3) = 1;
% Ni(2,1) = 1;
% % Ni(2,3) = 1;
% Ni(3,1) = 1;
% % Ni(3,2) = 1;

% DAG = [-1,1,0,0,0;
%         0,-1,0,1,0;
%         0,-1,1,0,0;
%         0,0,-1,1,0;
%         0,0,0,-1,1];
[row_d,~] = size(DAG);

le = randi([100,500],N,row_d);
Ln = le*(-DAG);

%Processing Energy Cost Parameters:
P_i = 36.9e-3; P_m = 36.9e-3;          % Processing Power; unit: W
f_i = 32e6; f_m = 32e6;                % Processing speed; unit: Hz

%Communication Energy Cost Parameters;
P_T0 = 59.8e-3;                        % RF circuit energy cost for receiving and transmitting; unit: W
t_tx = 4e-6; t_rx = 4e-6;              % time for transmitting or receiving 1 bitt data packet; unit: s

epi = P_i*(1/f_i);                % parameters of processing energy without workload of slave nodes;
epm = P_m*(1/f_m);                % parameters of processing energy without workload of master nodes;

eci = P_T0*(t_tx);                     % parameters of communication energy without workload of slave nodes;
ecm = P_T0*(t_rx);                     % parameters of communication energy without workload of master nodes;

%% ====================================================================
% 1. DAG of Xii;
xii = [];
for i = 1:N
    N_xii = [zeros(N),zeros(N)];
    N_xii(i,i) = 1;
    N_xii = N_xii';
    N_xii = reshape(N_xii,1,[]);
    xii = [xii;N_xii];
end
DAG_xii = kron(xii,DAG);
[row1,~] = size(xii);
DAG_xii = [zeros(row1*row_d,1),DAG_xii];
b_xii = zeros(row1*row_d,1);

A1 = DAG_xii;
b1 = b_xii;

% 2. DAG of sum Zji and Zjii;
sumz = [];
for i = 1:N
    for j = 1:N
        N_sumz = [zeros(N),zeros(N)];
        if Ni(i,j) == 1
            N_sumz(i,j) = 1;
            N_sumz(i,j+N) = 1;
            N_sumz = N_sumz';
            N_sumz = reshape(N_sumz,1,[]);
            sumz = [sumz;N_sumz];
        end
    end
end
DAG_sumz =kron(sumz,DAG); 
[row2,~] = size(sumz);
DAG_sumz = [zeros(row2*row_d,1),DAG_sumz];
b_sumz = zeros(row2*row_d,1);

A2 = DAG_sumz;
b2 = b_sumz;

% 3. DAG of sum of Xii, Zji£»
xz = [];
for i = 1:N
    for j = 1:N
        N_xz = [zeros(N),zeros(N)];
        if Ni(i,j) == 1
            N_xz(i,j) = 1;
            N_xz(i,i) = 1;
            N_xz = N_xz';
            N_xz = reshape(N_xz,1,[]);
            xz = [xz;N_xz];
        end
    end
end
DAG_xz = kron(xz,DAG);
[row3,~] = size(xz);
DAG_xz = [zeros(row3*row_d,1),DAG_xz];
b_xz = zeros(row3*row_d,1);

A3 = DAG_xz;
b3 = b_xz;

% 4. DAG of sum of all Zji and Xii;
sumxz = [];
for i = 1:N
    N_sumxz = [zeros(N),zeros(N)];
    for j = 1:N
        if Ni(i,j) ==1
            N_sumxz(i,j) = 1;
        end
    end
    N_sumxz(i,i) = 1;
    N_sumxz = N_sumxz';
    N_sumxz = reshape(N_sumxz,1,[]);
    sumxz = [sumxz;N_sumxz];
end
DAG_sumxz = kron(sumxz,DAG);
[row4,~] = size(sumxz);
DAG_sumxz = [zeros(row4*row_d,1),DAG_sumxz];
b_sumxz = zeros(row4*row_d,1);

A4 = DAG_sumxz;
b4 = b_sumxz;

% 5. Xii+Zji<=1;
xz1 = [];                        
for i = 1:N
    for j = 1:N
        N_xz1 = [zeros(N),zeros(N)];
        if Ni(i,j) == 1
            N_xz1(i,j) = 1;
            N_xz1(i,i) = 1;
            N_xz1 = N_xz1';
            N_xz1 = reshape(N_xz1,1,[]);
            xz1 = [xz1;N_xz1];
        end
    end
end
DAG_xz1 = kron(xz1,eye(K));
[row5,~] = size(xz1);
DAG_xz1 = [zeros(row5*K,1),DAG_xz1];
b_xz1 = ones(row5*K,1);

A5 = DAG_xz1;
b5 = b_xz1;

% 6. sum(alpha) <=0; sum(Zji)-Xii <=0;
alpha = [];
for i = 1:N            
    N_alpha = [zeros(N),zeros(N)];
    N_alpha(i,i) = -1;
    for j = 1:N
        if Ni(i,j) == 1
            N_alpha(i,j+N) = 1;
        end
    end
    N_alpha = N_alpha';
    N_alpha = reshape(N_alpha,1,[]);
    alpha = [alpha;N_alpha];
end
suma = kron(alpha,eye(K));
[row6,~] = size(suma);
suma = [zeros(row6,1),suma];
b_suma = zeros(row6,1);

A6 = suma;
b6 = b_suma;

% 7. sum(Zji)- Zjii(node 1) >=0;  
sumZR = [];
for i = 1:N
    for j = 1:N
        N_sumZR1 = zeros(N);
        N_sumZR2 = zeros(N);
        if Ni(i,j) == 1
            N_sumZR1(i,j) = 1;
            N_sumZR2(i,j) = 1;
            sumZR1 = kron(N_sumZR1,-1*ones(1,K));
            sumZR2 = kron(N_sumZR2,[1,zeros(1,K-1)]);
            tsumZR = [sumZR1,sumZR2];
            tsumZR = tsumZR';
            tsumZR = reshape(tsumZR,1,[]);
            sumZR = [sumZR;tsumZR];
        end
    end
end
[row7,~] = size(sumZR);
sumZR = [zeros(row7,1) sumZR];
b_sumZR = zeros(row7,1);

A7 = sumZR;
b7 = b_sumZR;

% 8. -T + Ei/Bati <= 0;
Ei = [];
for j = 1:N
    N_ei = [zeros(N,N*K),zeros(N,N*K)];
    Xii= epi*Wk(j,:)*10^3 + eci*Ln(j,:);
    N_ei(j,((j-1)*K+1:j*K)) = Xii;
    for i = 1:N
        if Ni(i,j) == 1;
            Zji = epi*Wk(i,:)*10^3 + eci*Ln(i,:);
            N_ei(i,((j-1)*K+1:j*K)) = Zji;
            Zijj = 2*eci*Ln(i);
            N_ei(i,(N*K+(j-1)*K+1:N*K+j*K)) = Zijj;
        end
    end
    N_ei = N_ei';
    N_ei = reshape(N_ei,1,[]);
    Ei = [Ei;N_ei];
end
for i = 1:N
    Ei(i,:) = Ei(i,:)/Bati(i);
end
Ei = [-1*ones(N,1),Ei];
b_Ei = zeros(N,1);

A8 = Ei;
b8 = b_Ei;

% 9. -T + Em/Batm <= 0;
E = ecm*Ln - epm*Wk*10^3;
em = epm*Wk*10^3;
e = kron(ones(1,N),E);
z = zeros(N,N*K);
Em = [e,z];
Em = Em';
Em = reshape(Em,1,[]);
Em = [-1,Em/Batm];
b_Em = -1*sum(sum(em))/Batm;

A9 = Em;
b9 = b_Em;

%% ==================================================
% Equation;
% 10. Xii(node 1) = 1;
node1 = [];
for i = 1:N 
    Xii_node = [zeros(N),zeros(N)];
    Xii_node(i,i) = 1;
    Xii_node = Xii_node';
    Xii_node = reshape(Xii_node,1,[]);
    node1 = [node1;Xii_node];
end
Node1 = kron(node1,[1,zeros(1,K-1)]);
Node1 = [zeros(N,1),Node1];
b_Node1 = ones(N,1);

Aeq1 = Node1;
beq1 = b_Node1;

% 11. Zji(node end) = 0;
zji_node = [];
for i = 1:N
    for j = 1:N
        Zji_node = [zeros(N),zeros(N)];
        Zji_node(i,j) = 1;
        Zji_node = Zji_node';
        Zji_node = reshape(Zji_node,1,[]);
        zji_node = [zji_node;Zji_node];
    end
end
zji_nodee = kron(zji_node,[zeros(1,K-1),1]);
[row11,~] = size(zji_nodee);
zji_nodee = [zeros(row11,1), zji_nodee];
b_zji_nodee = zeros(row11,1);

Aeq2 = zji_nodee;
beq2 = b_zji_nodee;
        
%% ============================================================
% lb;ub;
% lb:
lb = zeros(1,1+N*N*K*2);

% ub;
upper1 = kron(ones(N),ones(1,K));
u2 = ones(N) - eye(N);
upper2 = kron(u2,ones(1,K));
upper = [upper1,upper2];
upper = upper';
upper = reshape(upper,1,[]);
ub = [inf,upper];
%% =============================================================
intcon = (2:N*N*K*2+1);

%% =============================================================
% parameter formulation
A = [A1;A2;A3;A4;A5;A6;A7;A8;A9];
b = [b1;b2;b3;b4;b5;b6;b7;b8;b9];
Aeq = [Aeq1;Aeq2];
beq = [beq1;beq2];
f = [1,zeros(1,N*N*K*2)];

[x,fval] = intlinprog(f,intcon,A,b,Aeq,beq,lb,ub);

%% ================================================================
% task allocation without algorithm
x_sub_nor = zeros(1,K);
x_sub_nor(1) = 1;
x_nor = kron(eye(N),x_sub_nor);
x_nor_right = kron(eye(N),zeros(1,K));
X_NOR = [x_nor,x_nor_right];
X_NOR = X_NOR';
X_NOR = reshape(X_NOR,1,[]);
X_NOR = X_NOR';

nor_Ei = Ei;
nor_Ei(:,1) = [];
nor_Em = Em;
nor_Em(1) = [];
final_Ei = nor_Ei*X_NOR;
final_Em = nor_Em*X_NOR-b_Em;
final_nor = [final_Ei;final_Em];
max_nor = max(final_nor);

increase = max_nor/fval;
